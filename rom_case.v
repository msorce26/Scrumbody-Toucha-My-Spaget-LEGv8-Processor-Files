/*
// auto generated from http://users.rowan.edu/~haskellt8/assembler/
module rom_case(out, address);
	output reg [31:0] out;
	input  [15:0] address; // address- 16 deep memory  
	always @(address) begin
		case (address)
			// Overclock (Nice!) Test
			16'h0000:  out = 32'b11010010100000000000000000100111; // MOVZ X7, 1
			// change the shift amount to change the delay
			// if using a testbench to debug then change the shift amoun to 1
			16'h0001:  out = 32'b1101001101100000_011000_0011100111; // LSL X7, X7, 24  011000
			//16'h0001:  out = 32'b1101001101100000_000001_0011100111; // LSL X7, X7, 01  000001
			16'h0002:  out = 32'b11111000000000110000001111100111; // STUR X7, [XZR, 48]
			16'h0003:  out = 32'b11010001000001100101011111100000; // SUBI X0, XZR, 405
			16'h0004:  out = 32'b11010001000100000000001111100101; // SUBI X5, XZR, 1024
			16'h0005:  out = 32'b10110010000001000110011111100010; // ORRI X2, XZR, 281
			16'h0006:  out = 32'b10001011000001010000000001000010; // ADD X2, X2, X5
			16'h0007:  out = 32'b10001011000001010000000000000000; // ADD X0, X0, X5
			16'h0008:  out = 32'b10001011000001010000000010100101; // ADD X5, X5, X5
			16'h0009:  out = 32'b10001011000000100000000010100010; // ADD X2, X5, X2
			16'h000a:  out = 32'b11010011011000000000010010100101; // LSL X5, X5, 1
			16'h000b:  out = 32'b10001011000001010000000000000000; // ADD X0, X0, X5
			16'h000c:  out = 32'b11010011011000000000010010100101; // LSL X5, X5, 1
			16'h000d:  out = 32'b10001011000001010000000001000010; // ADD X2, X2, X5
			16'h000e:  out = 32'b11001011000001010000001111100101; // SUB X5, XZR, X5
			16'h000f:  out = 32'b10001011000000100000000000000000; // ADD X0, X0, X2
			16'h0010:  out = 32'b10001011000000100000000000000000; // ADD X0, X0, X2
			16'h0011:  out = 32'b11111000000000011000001111100000; // STUR X0, [XZR, 24]
			16'h0012:  out = 32'b11111000000000100000001111100010; // STUR X2, [XZR, 32]
			16'h0013:  out = 32'b11111000000000101000001111100101; // STUR X5, [XZR, 40]
			16'h0014:  out = 32'b10010001000000000000001111100000; // ADDI X0, XZR, 0
			16'h0015:  out = 32'b10010010000000000000001111100001; // ANDI X1, XZR, 0
			16'h0016:  out = 32'b11010010000000000000001111100010; // EORI X2, XZR, 0
			16'h0017:  out = 32'b10110010000000000000001111100011; // ORRI X3, XZR, 0
			16'h0018:  out = 32'b10101010000111110000001111100100; // ORR X4, X31, X31
			16'h0019:  out = 32'b10001010000111110000001111100101; // AND X5, X31, X31
			16'h001a:  out = 32'b10001010000111110000001111100110; // AND X6, X31, X31
			16'h001b:  out = 32'b11111000010000110000001111100111; // LDUR X7, [XZR, 48]
			16'h001c:  out = 32'b11010001000000000000010011100111; // SUBI X7, X7, 1
			16'h001d:  out = 32'b10110101111111111111111111000111; // CBNZ X7, -2
			16'h001e:  out = 32'b11010010100111111111111111100000; // MOVZ X0, 65535
			16'h001f:  out = 32'b11010001000000000000011111100001; // SUBI X1, XZR, 1
			16'h0020:  out = 32'b11010010100111111111111111100010; // MOVZ X2, 65535
			16'h0021:  out = 32'b11010001000000000000011111100011; // SUBI X3, XZR, 1
			16'h0022:  out = 32'b11010010100111111111111111100100; // MOVZ X4, 65535
			16'h0023:  out = 32'b11010001000000000000011111100101; // SUBI X5, XZR, 1
			16'h0024:  out = 32'b11010001000000000000011111100110; // SUBI X6, XZR, 1
			16'h0025:  out = 32'b11111000010000110000001111100111; // LDUR X7, [XZR, 48]
			16'h0026:  out = 32'b11010001000000000000010011100111; // SUBI X7, X7, 1
			16'h0027:  out = 32'b10110101111111111111111111000111; // CBNZ X7, -2
			16'h0028:  out = 32'b11111000010000011000001111100100; // LDUR X4, [XZR, 24]
			16'h0029:  out = 32'b11111000010000100000001111100010; // LDUR X2, [XZR, 32]
			16'h002a:  out = 32'b11111000010000101000001111100101; // LDUR X5, [XZR, 40]
			16'h002b:  out = 32'b10010001000000000000000001000011; // ADDI X3, X2, 0
			16'h002c:  out = 32'b10110010000000010000000001100011; // ORRI X3, X3, 64
			16'h002d:  out = 32'b11010010100000000000000100000111; // MOVZ X7, 8
			16'h002e:  out = 32'b11001011000001110000000001100011; // SUB X3, X3, X7
			16'h002f:  out = 32'b11010010100000000000000000100111; // MOVZ X7, 1
			16'h0030:  out = 32'b11001010000001110000000001100001; // EOR X1, X3, X7
			16'h0031:  out = 32'b11001011000001010000000000100001; // SUB X1, X1, X5
			16'h0032:  out = 32'b10110010000000000000000010000000; // ORRI X0, X4, 0
			16'h0033:  out = 32'b11010010100000000000000000000101; // MOVZ X5, 0
			16'h0034:  out = 32'b11010010100000000000000000000110; // MOVZ X6, 0
			16'h0035:  out = 32'b11111000010000110000001111100111; // LDUR X7, [XZR, 48]
			16'h0036:  out = 32'b11010001000000000000010011100111; // SUBI X7, X7, 1
			16'h0037:  out = 32'b10110101111111111111111111000111; // CBNZ X7, -2
			16'h0038:  out = 32'b11010110000000000000001111100000; // BR XZR
			default: out=32'hD60003E0; //BR XZR
		endcase
	end
endmodule*/

module rom_case(out, address);
output reg [31:0] out;
input  [15:0] address; // address- 16 deep memory  
always @(address) begin
case (address)
16'h0000:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0001:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0002:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0003:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0004:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0005:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0006:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0007:  out = 32'b11110010100000100000000000000010; // MOVK X2, 4096
16'h0008:  out = 32'b11010011011000001100000001000010; // LSL X2, X2, 48
16'h0009:  out = 32'b11111000010001011000000001011001; // LDUR X25, [X2, 88]
16'h000a:  out = 32'b10010010000000000111111100111010; // ANDI X26, X25, 31
16'h000b:  out = 32'b10010010000011111000001100111011; // ANDI X27, X25, 992
16'h000c:  out = 32'b11010011010000000001011101111011; // LSR X27, X27, 5
16'h000d:  out = 32'b10001011000110100000001101100000; // ADD X0, X27, X26
16'h000e:  out = 32'b10010001000001000000000001000011; // ADDI X3, X2, 256
16'h000f:  out = 32'b11111000000000000000000001100001; // STUR X1, [X3, 0]
16'h0010:  out = 32'b11111000000000001000000001100001; // STUR X1, [X3, 8]
16'h0011:  out = 32'b11111000000000010000000001100001; // STUR X1, [X3, 16]
16'h0012:  out = 32'b11111000000000011000000001100001; // STUR X1, [X3, 24]
16'h0013:  out = 32'b11111000000000100000000001100001; // STUR X1, [X3, 32]
16'h0014:  out = 32'b11111000000000101000000001100001; // STUR X1, [X3, 40]
16'h0015:  out = 32'b11111000000000110000000001100001; // STUR X1, [X3, 48]
16'h0016:  out = 32'b11111000000000111000000001100001; // STUR X1, [X3, 56]
16'h0017:  out = 32'b11110010100111100110011110100100; // MOVK X4, 62269
16'h0018:  out = 32'b11010011011000000100000010000100; // LSL X4, X4, 16
16'h0019:  out = 32'b11110010100001011011011100100100; // MOVK X4, 11705
16'h001a:  out = 32'b11010011011000000100000010000100; // LSL X4, X4, 16
16'h001b:  out = 32'b11110010100111000101010100000100; // MOVK X4, 58024
16'h001c:  out = 32'b11110010100100001001010010100101; // MOVK X5, 33957
16'h001d:  out = 32'b11010011011000000100000010100101; // LSL X5, X5, 16
16'h001e:  out = 32'b11110010100001010101010010100101; // MOVK X5, 10917
16'h001f:  out = 32'b11010011011000000100000010100101; // LSL X5, X5, 16
16'h0020:  out = 32'b11110010100001000101010100000101; // MOVK X5, 8872
16'h0021:  out = 32'b11110010100100001000011110100110; // MOVK X6, 33853
16'h0022:  out = 32'b11010011011000000100000011000110; // LSL X6, X6, 16
16'h0023:  out = 32'b11110010100001010001010010100110; // MOVK X6, 10405
16'h0024:  out = 32'b11010011011000000100000011000110; // LSL X6, X6, 16
16'h0025:  out = 32'b11110010100001000100100100000110; // MOVK X6, 8776
16'h0026:  out = 32'b11110010100111101000010100100111; // MOVK X7, 62505
16'h0027:  out = 32'b11010011011000000100000011100111; // LSL X7, X7, 16
16'h0028:  out = 32'b11110010100001010001011110100111; // MOVK X7, 10429
16'h0029:  out = 32'b11010011011000000100000011100111; // LSL X7, X7, 16
16'h002a:  out = 32'b11110010100001000100100100000111; // MOVK X7, 8776
16'h002b:  out = 32'b11110010100000101000010010101000; // MOVK X8, 5157
16'h002c:  out = 32'b11010011011000000100000100001000; // LSL X8, X8, 16
16'h002d:  out = 32'b11110010100001010001010010101000; // MOVK X8, 10405
16'h002e:  out = 32'b11010011011000000100000100001000; // LSL X8, X8, 16
16'h002f:  out = 32'b11110010100001011100100100001000; // MOVK X8, 11848
16'h0030:  out = 32'b11110010100000101000010010101001; // MOVK X9, 5157
16'h0031:  out = 32'b11010011011000000100000100101001; // LSL X9, X9, 16
16'h0032:  out = 32'b11110010100001010001010010101001; // MOVK X9, 10405
16'h0033:  out = 32'b11010011011000000100000100101001; // LSL X9, X9, 16
16'h0034:  out = 32'b11110010100001010100100100001001; // MOVK X9, 10824
16'h0035:  out = 32'b11110010100000101001010010101010; // MOVK X10, 5285
16'h0036:  out = 32'b11010011011000000100000101001010; // LSL X10, X10, 16
16'h0037:  out = 32'b11110010100001010001010010101010; // MOVK X10, 10405
16'h0038:  out = 32'b11010011011000000100000101001010; // LSL X10, X10, 16
16'h0039:  out = 32'b11110010100001010100100000001010; // MOVK X10, 10816
16'h003a:  out = 32'b11110010100111100110010010101011; // MOVK X11, 62245
16'h003b:  out = 32'b11010011011000000100000101101011; // LSL X11, X11, 16
16'h003c:  out = 32'b11110010100111010001011100101011; // MOVK X11, 59577
16'h003d:  out = 32'b11010011011000000100000101101011; // LSL X11, X11, 16
16'h003e:  out = 32'b11110010100111011100100100001011; // MOVK X11, 61000
16'h003f:  out = 32'b10010001000000000000000001001100; // ADDI X12, X2, 0
16'h0040:  out = 32'b11010010100000000000100000001111; // MOVZ X15, 64
16'h0041:  out = 32'b11111000000000000000000110001011; // STUR X11, [X12, 0]
16'h0042:  out = 32'b11111000000000001000000110001010; // STUR X10, [X12, 8]
16'h0043:  out = 32'b11111000000000010000000110001001; // STUR X9, [X12, 16]
16'h0044:  out = 32'b11111000000000011000000110001000; // STUR X8, [X12, 24]
16'h0045:  out = 32'b11111000000000100000000110000111; // STUR X7, [X12, 32]
16'h0046:  out = 32'b11111000000000101000000110000110; // STUR X6, [X12, 40]
16'h0047:  out = 32'b11111000000000110000000110000101; // STUR X5, [X12, 48]
16'h0048:  out = 32'b11111000000000111000000110000100; // STUR X4, [X12, 56]
16'h0049:  out = 32'b11010011011000000000010101101011; // LSL X11, X11, 1
16'h004a:  out = 32'b11010011011000000000010101001010; // LSL X10, X10, 1
16'h004b:  out = 32'b11010011011000000000010100101001; // LSL X9, X9, 1
16'h004c:  out = 32'b11010011011000000000010100001000; // LSL X8, X8, 1
16'h004d:  out = 32'b11010011011000000000010011100111; // LSL X7, X7, 1
16'h004e:  out = 32'b11010011011000000000010011000110; // LSL X6, X6, 1
16'h004f:  out = 32'b11010011011000000000010010100101; // LSL X5, X5, 1
16'h0050:  out = 32'b11010011011000000000010010000100; // LSL X4, X4, 1
16'h0051:  out = 32'b11110010100111111111111111111101; // MOVK X29, 65535
16'h0052:  out = 32'b11010011011000000001011110111101; // LSL X29, X29, 5
16'h0053:  out = 32'b11010001000000000000011110111101; // SUBI X29, X29, 1
16'h0054:  out = 32'b10110101111111111111111111011101; // CBNZ X29, -2
16'h0055:  out = 32'b11010001000000000000010111101111; // SUBI X15, X15, 1
16'h0056:  out = 32'b10110101111111111111110101001111; // CBNZ X15, -22
16'h0057:  out = 32'b10001010000111110000000000100001; // AND X1, X1, XZR
16'h0058:  out = 32'b10001010000111110000000001100011; // AND X3, X3, XZR
16'h0059:  out = 32'b10001010000111110000000010000100; // AND X4, X4, XZR
16'h005a:  out = 32'b10001010000111110000000010100101; // AND X5, X5, XZR
16'h005b:  out = 32'b10001010000111110000000011000110; // AND X6, X6, XZR
16'h005c:  out = 32'b10001010000111110000000011100111; // AND X7, X7, XZR
16'h005d:  out = 32'b10001010000111110000000100001000; // AND X8, X8, XZR
16'h005e:  out = 32'b10001010000111110000000100101001; // AND X9, X9, XZR
16'h005f:  out = 32'b10001010000111110000000101001010; // AND X10, X10, XZR
16'h0060:  out = 32'b10001010000111110000000101101011; // AND X11, X11, XZR
16'h0061:  out = 32'b10001010000111110000000110001100; // AND X12, X12, XZR
16'h0062:  out = 32'b10001010000111110000000110101101; // AND X13, X13, XZR
16'h0063:  out = 32'b10001010000111110000000111001110; // AND X14, X14, XZR
16'h0064:  out = 32'b10001010000111110000000111101111; // AND X15, X15, XZR
16'h0065:  out = 32'b10001010000111110000001000010000; // AND X16, X16, XZR
16'h0066:  out = 32'b10001010000111110000001000110001; // AND X17, X17, XZR
16'h0067:  out = 32'b10001010000111110000001001010010; // AND X18, X18, XZR
16'h0068:  out = 32'b10001010000111110000001011110111; // AND X23, X23, XZR
16'h0069:  out = 32'b10001010000111110000001100011000; // AND X24, X24, XZR
16'h006a:  out = 32'b10001010000111110000001110011100; // AND X28, X28, XZR
16'h006b:  out = 32'b10001010000111110000001110111101; // AND X29, X29, XZR
16'h006c:  out = 32'b10001010000111110000001111011110; // AND X30, X30, XZR
16'h006d:  out = 32'b11010110000000000000001111100000; // BR XZR
default: out=32'hD60003E0; //BR XZR
endcase
end
endmodule
/*
module rom_case(out, address);
output reg [31:0] out;
input  [15:0] address; // address- 16 deep memory  
always @(address) begin
case (address)
16'h0000:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0001:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0002:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0003:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0004:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0005:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0006:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0007:  out = 32'b11110010100000100000000000000010; // MOVK X2, 4096
16'h0008:  out = 32'b11010011011000001100000001000010; // LSL X2, X2, 48
16'h0009:  out = 32'b11111000010001011000000001011001; // LDUR X25, [X2, 88]
16'h000a:  out = 32'b10010010000000000111111100111010; // ANDI X26, X25, 31
16'h000b:  out = 32'b10010010000011111000001100111011; // ANDI X27, X25, 992
16'h000c:  out = 32'b11010011010000000001011101111011; // LSR X27, X27, 5
16'h000d:  out = 32'b10001011000110100000001101100000; // ADD X0, X27, X26
16'h000e:  out = 32'b10010001000001000000000001000011; // ADDI X3, X2, 256
16'h000f:  out = 32'b11111000000000000000000001100001; // STUR X1, [X3, 0]
16'h0010:  out = 32'b11111000000000001000000001100001; // STUR X1, [X3, 8]
16'h0011:  out = 32'b11111000000000010000000001100001; // STUR X1, [X3, 16]
16'h0012:  out = 32'b11111000000000011000000001100001; // STUR X1, [X3, 24]
16'h0013:  out = 32'b11111000000000100000000001100001; // STUR X1, [X3, 32]
16'h0014:  out = 32'b11111000000000101000000001100001; // STUR X1, [X3, 40]
16'h0015:  out = 32'b11111000000000110000000001100001; // STUR X1, [X3, 48]
16'h0016:  out = 32'b11111000000000111000000001100001; // STUR X1, [X3, 56]
16'h0017:  out = 32'b11110010100111100110011110100100; // MOVK X4, 62269
16'h0018:  out = 32'b11010011011000000100000010000100; // LSL X4, X4, 16
16'h0019:  out = 32'b11110010100001011011011100100100; // MOVK X4, 11705
16'h001a:  out = 32'b11010011011000000100000010000100; // LSL X4, X4, 16
16'h001b:  out = 32'b11110010100111000101010100000100; // MOVK X4, 58024
16'h001c:  out = 32'b11110010100100001001010010100101; // MOVK X5, 33957
16'h001d:  out = 32'b11010011011000000100000010100101; // LSL X5, X5, 16
16'h001e:  out = 32'b11110010100001010101010010100101; // MOVK X5, 10917
16'h001f:  out = 32'b11010011011000000100000010100101; // LSL X5, X5, 16
16'h0020:  out = 32'b11110010100001000101010100000101; // MOVK X5, 8872
16'h0021:  out = 32'b11110010100100001000011110100110; // MOVK X6, 33853
16'h0022:  out = 32'b11010011011000000100000011000110; // LSL X6, X6, 16
16'h0023:  out = 32'b11110010100001010001010010100110; // MOVK X6, 10405
16'h0024:  out = 32'b11010011011000000100000011000110; // LSL X6, X6, 16
16'h0025:  out = 32'b11110010100001000100100100000110; // MOVK X6, 8776
16'h0026:  out = 32'b11110010100111101000010100100111; // MOVK X7, 62505
16'h0027:  out = 32'b11010011011000000100000011100111; // LSL X7, X7, 16
16'h0028:  out = 32'b11110010100001010001011110100111; // MOVK X7, 10429
16'h0029:  out = 32'b11010011011000000100000011100111; // LSL X7, X7, 16
16'h002a:  out = 32'b11110010100001000100100100000111; // MOVK X7, 8776
16'h002b:  out = 32'b11110010100000101000010010101000; // MOVK X8, 5157
16'h002c:  out = 32'b11010011011000000100000100001000; // LSL X8, X8, 16
16'h002d:  out = 32'b11110010100001010001010010101000; // MOVK X8, 10405
16'h002e:  out = 32'b11010011011000000100000100001000; // LSL X8, X8, 16
16'h002f:  out = 32'b11110010100001011100100100001000; // MOVK X8, 11848
16'h0030:  out = 32'b11110010100000101000010010101001; // MOVK X9, 5157
16'h0031:  out = 32'b11010011011000000100000100101001; // LSL X9, X9, 16
16'h0032:  out = 32'b11110010100001010001010010101001; // MOVK X9, 10405
16'h0033:  out = 32'b11010011011000000100000100101001; // LSL X9, X9, 16
16'h0034:  out = 32'b11110010100001010100100100001001; // MOVK X9, 10824
16'h0035:  out = 32'b11110010100000101001010010101010; // MOVK X10, 5285
16'h0036:  out = 32'b11010011011000000100000101001010; // LSL X10, X10, 16
16'h0037:  out = 32'b11110010100001010001010010101010; // MOVK X10, 10405
16'h0038:  out = 32'b11010011011000000100000101001010; // LSL X10, X10, 16
16'h0039:  out = 32'b11110010100001010100100000001010; // MOVK X10, 10816
16'h003a:  out = 32'b11110010100111100110010010101011; // MOVK X11, 62245
16'h003b:  out = 32'b11010011011000000100000101101011; // LSL X11, X11, 16
16'h003c:  out = 32'b11110010100111010001011100101011; // MOVK X11, 59577
16'h003d:  out = 32'b11010011011000000100000101101011; // LSL X11, X11, 16
16'h003e:  out = 32'b11110010100111011100100100001011; // MOVK X11, 61000
16'h003f:  out = 32'b10010001000000000000000001001100; // ADDI X12, X2, 0
16'h0040:  out = 32'b11010010100000000000100000001111; // MOVZ X15, 64
16'h0041:  out = 32'b11111000000000000000000110001011; // STUR X11, [X12, 0]
16'h0042:  out = 32'b11111000000000001000000110001010; // STUR X10, [X12, 8]
16'h0043:  out = 32'b11111000000000010000000110001001; // STUR X9, [X12, 16]
16'h0044:  out = 32'b11111000000000011000000110001000; // STUR X8, [X12, 24]
16'h0045:  out = 32'b11111000000000100000000110000111; // STUR X7, [X12, 32]
16'h0046:  out = 32'b11111000000000101000000110000110; // STUR X6, [X12, 40]
16'h0047:  out = 32'b11111000000000110000000110000101; // STUR X5, [X12, 48]
16'h0048:  out = 32'b11111000000000111000000110000100; // STUR X4, [X12, 56]
16'h0049:  out = 32'b11010011011000000000010101101011; // LSL X11, X11, 1
16'h004a:  out = 32'b11010011011000000000010101001010; // LSL X10, X10, 1
16'h004b:  out = 32'b11010011011000000000010100101001; // LSL X9, X9, 1
16'h004c:  out = 32'b11010011011000000000010100001000; // LSL X8, X8, 1
16'h004d:  out = 32'b11010011011000000000010011100111; // LSL X7, X7, 1
16'h004e:  out = 32'b11010011011000000000010011000110; // LSL X6, X6, 1
16'h004f:  out = 32'b11010011011000000000010010100101; // LSL X5, X5, 1
16'h0050:  out = 32'b11010011011000000000010010000100; // LSL X4, X4, 1
16'h0051:  out = 32'b11110010100111111111111111111101; // MOVK X29, 65535
16'h0052:  out = 32'b11010011011000000000111110111101; // LSL X29, X29, 3
16'h0053:  out = 32'b11010001000000000000011110111101; // SUBI X29, X29, 1
16'h0054:  out = 32'b10110101111111111111111111011101; // CBNZ X29, -2
16'h0055:  out = 32'b11010001000000000000010111101111; // SUBI X15, X15, 1
16'h0056:  out = 32'b10110101111111111111110101001111; // CBNZ X15, -22
16'h0057:  out = 32'b10001010000111110000000000100001; // AND X1, X1, XZR
16'h0058:  out = 32'b10001010000111110000000001100011; // AND X3, X3, XZR
16'h0059:  out = 32'b10001010000111110000000010000100; // AND X4, X4, XZR
16'h005a:  out = 32'b10001010000111110000000010100101; // AND X5, X5, XZR
16'h005b:  out = 32'b10001010000111110000000011000110; // AND X6, X6, XZR
16'h005c:  out = 32'b10001010000111110000000011100111; // AND X7, X7, XZR
16'h005d:  out = 32'b10001010000111110000000100001000; // AND X8, X8, XZR
16'h005e:  out = 32'b10001010000111110000000100101001; // AND X9, X9, XZR
16'h005f:  out = 32'b10001010000111110000000101001010; // AND X10, X10, XZR
16'h0060:  out = 32'b10001010000111110000000101101011; // AND X11, X11, XZR
16'h0061:  out = 32'b10001010000111110000000110001100; // AND X12, X12, XZR
16'h0062:  out = 32'b10001010000111110000000110101101; // AND X13, X13, XZR
16'h0063:  out = 32'b10001010000111110000000111001110; // AND X14, X14, XZR
16'h0064:  out = 32'b10001010000111110000000111101111; // AND X15, X15, XZR
16'h0065:  out = 32'b10001010000111110000001000010000; // AND X16, X16, XZR
16'h0066:  out = 32'b10001010000111110000001000110001; // AND X17, X17, XZR
16'h0067:  out = 32'b10001010000111110000001001010010; // AND X18, X18, XZR
16'h0068:  out = 32'b10001010000111110000001011110111; // AND X23, X23, XZR
16'h0069:  out = 32'b10001010000111110000001100011000; // AND X24, X24, XZR
16'h006a:  out = 32'b10001010000111110000001110011100; // AND X28, X28, XZR
16'h006b:  out = 32'b10001010000111110000001110111101; // AND X29, X29, XZR
16'h006c:  out = 32'b10001010000111110000001111011110; // AND X30, X30, XZR
16'h006d:  out = 32'b11010110000000000000001111100000; // BR XZR
default: out=32'hD60003E0; //BR XZR
endcase
end
endmodule
/*module rom_case(out, address);
output reg [31:0] out;
input  [15:0] address; // address- 16 deep memory  
always @(address) begin
case (address)
16'h0000:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0001:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0002:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0003:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0004:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0005:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0006:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0007:  out = 32'b11110010100000100000000000000010; // MOVK X2, 4096
16'h0008:  out = 32'b11010011011000001100000001000010; // LSL X2, X2, 48
16'h0009:  out = 32'b10010001000000010000000001010111; // ADDI X23, X2, 64
16'h000a:  out = 32'b10010001000001010000000001011000; // ADDI X24, X2, 320
16'h000b:  out = 32'b10010001000010010000000001011001; // ADDI X25, X2, 576
16'h000c:  out = 32'b11111000010000000000001100100000; // LDUR X0, [X25, 0]
16'h000d:  out = 32'b10010001000001000000000001000011; // ADDI X3, X2, 256
16'h000e:  out = 32'b11111000000000000000000001100001; // STUR X1, [X3, 0]
16'h000f:  out = 32'b11111000000000001000000001100001; // STUR X1, [X3, 8]
16'h0010:  out = 32'b11111000000000010000000001100001; // STUR X1, [X3, 16]
16'h0011:  out = 32'b11111000000000011000000001100001; // STUR X1, [X3, 24]
16'h0012:  out = 32'b11111000000000100000000001100001; // STUR X1, [X3, 32]
16'h0013:  out = 32'b11111000000000101000000001100001; // STUR X1, [X3, 40]
16'h0014:  out = 32'b11111000000000110000000001100001; // STUR X1, [X3, 48]
16'h0015:  out = 32'b11111000000000111000000001100001; // STUR X1, [X3, 56]
16'h0016:  out = 32'b11110010100111100110011110100100; // MOVK X4, 62269
16'h0017:  out = 32'b11010011011000000100000010000100; // LSL X4, X4, 16
16'h0018:  out = 32'b11110010100001011011011100100100; // MOVK X4, 11705
16'h0019:  out = 32'b11010011011000000100000010000100; // LSL X4, X4, 16
16'h001a:  out = 32'b11110010100111000101010100000100; // MOVK X4, 58024
16'h001b:  out = 32'b11110010100100001001010010100101; // MOVK X5, 33957
16'h001c:  out = 32'b11010011011000000100000010100101; // LSL X5, X5, 16
16'h001d:  out = 32'b11110010100001010101010010100101; // MOVK X5, 10917
16'h001e:  out = 32'b11010011011000000100000010100101; // LSL X5, X5, 16
16'h001f:  out = 32'b11110010100001000101010100000101; // MOVK X5, 8872
16'h0020:  out = 32'b11110010100100001000011110100110; // MOVK X6, 33853
16'h0021:  out = 32'b11010011011000000100000011000110; // LSL X6, X6, 16
16'h0022:  out = 32'b11110010100001010001010010100110; // MOVK X6, 10405
16'h0023:  out = 32'b11010011011000000100000011000110; // LSL X6, X6, 16
16'h0024:  out = 32'b11110010100001000100100100000110; // MOVK X6, 8776
16'h0025:  out = 32'b11110010100111101000010100100111; // MOVK X7, 62505
16'h0026:  out = 32'b11010011011000000100000011100111; // LSL X7, X7, 16
16'h0027:  out = 32'b11110010100001010001011110100111; // MOVK X7, 10429
16'h0028:  out = 32'b11010011011000000100000011100111; // LSL X7, X7, 16
16'h0029:  out = 32'b11110010100001000100100100000111; // MOVK X7, 8776
16'h002a:  out = 32'b11110010100000101000010010101000; // MOVK X8, 5157
16'h002b:  out = 32'b11010011011000000100000100001000; // LSL X8, X8, 16
16'h002c:  out = 32'b11110010100001010001010010101000; // MOVK X8, 10405
16'h002d:  out = 32'b11010011011000000100000100001000; // LSL X8, X8, 16
16'h002e:  out = 32'b11110010100001011100100100001000; // MOVK X8, 11848
16'h002f:  out = 32'b11110010100000101000010010101001; // MOVK X9, 5157
16'h0030:  out = 32'b11010011011000000100000100101001; // LSL X9, X9, 16
16'h0031:  out = 32'b11110010100001010001010010101001; // MOVK X9, 10405
16'h0032:  out = 32'b11010011011000000100000100101001; // LSL X9, X9, 16
16'h0033:  out = 32'b11110010100001010100100100001001; // MOVK X9, 10824
16'h0034:  out = 32'b11110010100000101001010010101010; // MOVK X10, 5285
16'h0035:  out = 32'b11010011011000000100000101001010; // LSL X10, X10, 16
16'h0036:  out = 32'b11110010100001010001010010101010; // MOVK X10, 10405
16'h0037:  out = 32'b11010011011000000100000101001010; // LSL X10, X10, 16
16'h0038:  out = 32'b11110010100001010100100000001010; // MOVK X10, 10816
16'h0039:  out = 32'b11110010100111100110010010101011; // MOVK X11, 62245
16'h003a:  out = 32'b11010011011000000100000101101011; // LSL X11, X11, 16
16'h003b:  out = 32'b11110010100111010001011100101011; // MOVK X11, 59577
16'h003c:  out = 32'b11010011011000000100000101101011; // LSL X11, X11, 16
16'h003d:  out = 32'b11110010100111011100100100001011; // MOVK X11, 61000
16'h003e:  out = 32'b10010001000000000000000001001100; // ADDI X12, X2, 0
16'h003f:  out = 32'b11010010100000000000100000001111; // MOVZ X15, 64
16'h0040:  out = 32'b11111000000000000000000110001011; // STUR X11, [X12, 0]
16'h0041:  out = 32'b11111000000000001000000110001010; // STUR X10, [X12, 8]
16'h0042:  out = 32'b11111000000000010000000110001001; // STUR X9, [X12, 16]
16'h0043:  out = 32'b11111000000000011000000110001000; // STUR X8, [X12, 24]
16'h0044:  out = 32'b11111000000000100000000110000111; // STUR X7, [X12, 32]
16'h0045:  out = 32'b11111000000000101000000110000110; // STUR X6, [X12, 40]
16'h0046:  out = 32'b11111000000000110000000110000101; // STUR X5, [X12, 48]
16'h0047:  out = 32'b11111000000000111000000110000100; // STUR X4, [X12, 56]
16'h0048:  out = 32'b11010011011000000000010101101011; // LSL X11, X11, 1
16'h0049:  out = 32'b11010011011000000000010101001010; // LSL X10, X10, 1
16'h004a:  out = 32'b11010011011000000000010100101001; // LSL X9, X9, 1
16'h004b:  out = 32'b11010011011000000000010100001000; // LSL X8, X8, 1
16'h004c:  out = 32'b11010011011000000000010011100111; // LSL X7, X7, 1
16'h004d:  out = 32'b11010011011000000000010011000110; // LSL X6, X6, 1
16'h004e:  out = 32'b11010011011000000000010010100101; // LSL X5, X5, 1
16'h004f:  out = 32'b11010011011000000000010010000100; // LSL X4, X4, 1
16'h0050:  out = 32'b11110010100111111111111111111101; // MOVK X29, 65535
16'h0051:  out = 32'b11010011011000000000111110111101; // LSL X29, X29, 3
16'h0052:  out = 32'b11010001000000000000011110111101; // SUBI X29, X29, 1
16'h0053:  out = 32'b10110101111111111111111111011101; // CBNZ X29, -2
16'h0054:  out = 32'b11010001000000000000010111101111; // SUBI X15, X15, 1
16'h0055:  out = 32'b10110101111111111111110101001111; // CBNZ X15, -22
16'h0056:  out = 32'b10001010000111110000000000000000; // AND X0, X0, XZR
16'h0057:  out = 32'b10001010000111110000000000100001; // AND X1, X1, XZR
16'h0058:  out = 32'b10001010000111110000000001100011; // AND X3, X3, XZR
16'h0059:  out = 32'b10001010000111110000000010000100; // AND X4, X4, XZR
16'h005a:  out = 32'b10001010000111110000000010100101; // AND X5, X5, XZR
16'h005b:  out = 32'b10001010000111110000000011000110; // AND X6, X6, XZR
16'h005c:  out = 32'b10001010000111110000000011100111; // AND X7, X7, XZR
16'h005d:  out = 32'b10001010000111110000000100001000; // AND X8, X8, XZR
16'h005e:  out = 32'b10001010000111110000000100101001; // AND X9, X9, XZR
16'h005f:  out = 32'b10001010000111110000000101001010; // AND X10, X10, XZR
16'h0060:  out = 32'b10001010000111110000000101101011; // AND X11, X11, XZR
16'h0061:  out = 32'b10001010000111110000000110001100; // AND X12, X12, XZR
16'h0062:  out = 32'b10001010000111110000000110101101; // AND X13, X13, XZR
16'h0063:  out = 32'b10001010000111110000000111001110; // AND X14, X14, XZR
16'h0064:  out = 32'b10001010000111110000000111101111; // AND X15, X15, XZR
16'h0065:  out = 32'b10001010000111110000001000010000; // AND X16, X16, XZR
16'h0066:  out = 32'b10001010000111110000001000110001; // AND X17, X17, XZR
16'h0067:  out = 32'b10001010000111110000001001010010; // AND X18, X18, XZR
16'h0068:  out = 32'b10001010000111110000001011110111; // AND X23, X23, XZR
16'h0069:  out = 32'b10001010000111110000001100011000; // AND X24, X24, XZR
16'h006a:  out = 32'b10001010000111110000001100111001; // AND X25, X25, XZR
16'h006b:  out = 32'b10001010000111110000001101011010; // AND X26, X26, XZR
16'h006c:  out = 32'b10001010000111110000001110011100; // AND X28, X28, XZR
16'h006d:  out = 32'b10001010000111110000001110111101; // AND X29, X29, XZR
16'h006e:  out = 32'b10001010000111110000001111011110; // AND X30, X30, XZR
16'h006f:  out = 32'b11010110000000000000001111100000; // BR XZR
default: out=32'hD60003E0; //BR XZR
endcase
end
endmodule

/*module rom_case(out, address);
output reg [31:0] out;
input  [15:0] address; // address- 16 deep memory  
always @(address) begin
case (address)
16'h0000:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0001:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0002:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0003:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0004:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0005:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0006:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0007:  out = 32'b11110010100000100000000000000010; // MOVK X2, 4096
16'h0008:  out = 32'b11010011011000001100000001000010; // LSL X2, X2, 48
16'h0009:  out = 32'b10010001000001000000000001000011; // ADDI X3, X2, 256
16'h000a:  out = 32'b11111000000000000000000001100001; // STUR X1, [X3, 0]
16'h000b:  out = 32'b11111000000000001000000001100001; // STUR X1, [X3, 8]
16'h000c:  out = 32'b11111000000000010000000001100001; // STUR X1, [X3, 16]
16'h000d:  out = 32'b11111000000000011000000001100001; // STUR X1, [X3, 24]
16'h000e:  out = 32'b11111000000000100000000001100001; // STUR X1, [X3, 32]
16'h000f:  out = 32'b11111000000000101000000001100001; // STUR X1, [X3, 40]
16'h0010:  out = 32'b11111000000000110000000001100001; // STUR X1, [X3, 48]
16'h0011:  out = 32'b11111000000000111000000001100001; // STUR X1, [X3, 56]
16'h0012:  out = 32'b11110010100111100110011110100100; // MOVK X4, 62269
16'h0013:  out = 32'b11010011011000000100000010000100; // LSL X4, X4, 16
16'h0014:  out = 32'b11110010100001011011011100100100; // MOVK X4, 11705
16'h0015:  out = 32'b11010011011000000100000010000100; // LSL X4, X4, 16
16'h0016:  out = 32'b11110010100111000101010100000100; // MOVK X4, 58024
16'h0017:  out = 32'b11110010100100001001010010100101; // MOVK X5, 33957
16'h0018:  out = 32'b11010011011000000100000010100101; // LSL X5, X5, 16
16'h0019:  out = 32'b11110010100001010101010010100101; // MOVK X5, 10917
16'h001a:  out = 32'b11010011011000000100000010100101; // LSL X5, X5, 16
16'h001b:  out = 32'b11110010100001000101010100000101; // MOVK X5, 8872
16'h001c:  out = 32'b11110010100100001000011110100110; // MOVK X6, 33853
16'h001d:  out = 32'b11010011011000000100000011000110; // LSL X6, X6, 16
16'h001e:  out = 32'b11110010100001010001010010100110; // MOVK X6, 10405
16'h001f:  out = 32'b11010011011000000100000011000110; // LSL X6, X6, 16
16'h0020:  out = 32'b11110010100001000100100100000110; // MOVK X6, 8776
16'h0021:  out = 32'b11110010100111101000010100100111; // MOVK X7, 62505
16'h0022:  out = 32'b11010011011000000100000011100111; // LSL X7, X7, 16
16'h0023:  out = 32'b11110010100001010001011110100111; // MOVK X7, 10429
16'h0024:  out = 32'b11010011011000000100000011100111; // LSL X7, X7, 16
16'h0025:  out = 32'b11110010100001000100100100000111; // MOVK X7, 8776
16'h0026:  out = 32'b11110010100000101000010010101000; // MOVK X8, 5157
16'h0027:  out = 32'b11010011011000000100000100001000; // LSL X8, X8, 16
16'h0028:  out = 32'b11110010100001010001010010101000; // MOVK X8, 10405
16'h0029:  out = 32'b11010011011000000100000100001000; // LSL X8, X8, 16
16'h002a:  out = 32'b11110010100001011100100100001000; // MOVK X8, 11848
16'h002b:  out = 32'b11110010100000101000010010101001; // MOVK X9, 5157
16'h002c:  out = 32'b11010011011000000100000100101001; // LSL X9, X9, 16
16'h002d:  out = 32'b11110010100001010001010010101001; // MOVK X9, 10405
16'h002e:  out = 32'b11010011011000000100000100101001; // LSL X9, X9, 16
16'h002f:  out = 32'b11110010100001010100100100001001; // MOVK X9, 10824
16'h0030:  out = 32'b11110010100000101001010010101010; // MOVK X10, 5285
16'h0031:  out = 32'b11010011011000000100000101001010; // LSL X10, X10, 16
16'h0032:  out = 32'b11110010100001010001010010101010; // MOVK X10, 10405
16'h0033:  out = 32'b11010011011000000100000101001010; // LSL X10, X10, 16
16'h0034:  out = 32'b11110010100001010100100000001010; // MOVK X10, 10816
16'h0035:  out = 32'b11110010100111100110010010101011; // MOVK X11, 62245
16'h0036:  out = 32'b11010011011000000100000101101011; // LSL X11, X11, 16
16'h0037:  out = 32'b11110010100111010001011100101011; // MOVK X11, 59577
16'h0038:  out = 32'b11010011011000000100000101101011; // LSL X11, X11, 16
16'h0039:  out = 32'b11110010100111011100100100001011; // MOVK X11, 61000
16'h003a:  out = 32'b10010001000000000000000001001100; // ADDI X12, X2, 0
16'h003b:  out = 32'b11111000010000110000001111101111; // LDUR X15, [XZR, 48]
16'h003c:  out = 32'b11111000000000000000000110001011; // STUR X11, [X12, 0]
16'h003d:  out = 32'b11111000000000001000000110001010; // STUR X10, [X12, 8]
16'h003e:  out = 32'b11111000000000010000000110001001; // STUR X9, [X12, 16]
16'h003f:  out = 32'b11111000000000011000000110001000; // STUR X8, [X12, 24]
16'h0040:  out = 32'b11111000000000100000000110000111; // STUR X7, [X12, 32]
16'h0041:  out = 32'b11111000000000101000000110000110; // STUR X6, [X12, 40]
16'h0042:  out = 32'b11111000000000110000000110000101; // STUR X5, [X12, 48]
16'h0043:  out = 32'b11111000000000111000000110000100; // STUR X4, [X12, 56]
16'h0044:  out = 32'b11010011011000000000010101101011; // LSL X11, X11, 1
16'h0045:  out = 32'b11010011011000000000010101001010; // LSL X10, X10, 1
16'h0046:  out = 32'b11010011011000000000010100101001; // LSL X9, X9, 1
16'h0047:  out = 32'b11010011011000000000010100001000; // LSL X8, X8, 1
16'h0048:  out = 32'b11010011011000000000010011100111; // LSL X7, X7, 1
16'h0049:  out = 32'b11010011011000000000010011000110; // LSL X6, X6, 1
16'h004a:  out = 32'b11010011011000000000010010100101; // LSL X5, X5, 1
16'h004b:  out = 32'b11010011011000000000010010000100; // LSL X4, X4, 1
16'h004c:  out = 32'b10010001001111101000001111111110; // ADDI X30, XZR, 4000
16'h004d:  out = 32'b11010001000000000000011111011110; // SUBI X30, X30, 1
16'h004e:  out = 32'b10110101111111111111111111011110; // CBNZ X30, -2
16'h004f:  out = 32'b10010001001111101000001111111110; // ADDI X30, XZR, 4000
16'h0050:  out = 32'b11010001000000000000011111011110; // SUBI X30, X30, 1
16'h0051:  out = 32'b10110101111111111111111111011110; // CBNZ X30, -2
16'h0052:  out = 32'b10010001001111101000001111111110; // ADDI X30, XZR, 4000
16'h0053:  out = 32'b11010001000000000000011111011110; // SUBI X30, X30, 1
16'h0054:  out = 32'b10110101111111111111111111011110; // CBNZ X30, -2
16'h0055:  out = 32'b10010001001111101000001111111110; // ADDI X30, XZR, 4000
16'h0056:  out = 32'b11010001000000000000011111011110; // SUBI X30, X30, 1
16'h0057:  out = 32'b10110101111111111111111111011110; // CBNZ X30, -2
16'h0058:  out = 32'b11110010100111111111111111111101; // MOVK X29, 65535
16'h0059:  out = 32'b11010011011000000000111110111101; // LSL X29, X29, 3
16'h005a:  out = 32'b11010001000000000000011110111101; // SUBI X29, X29, 1
16'h005b:  out = 32'b10110101111111111111111111011101; // CBNZ X29, -2
16'h005c:  out = 32'b11010001000000000000010111101111; // SUBI X15, X15, 1
16'h005d:  out = 32'b10110101111111111111101111001111; // CBNZ X15, -34
16'h005e:  out = 32'b11110010100111111111111111111100; // MOVK X28, 65535
16'h005f:  out = 32'b11010011011000000001001110011100; // LSL X28, X28, 4
16'h0060:  out = 32'b11010001000000000000011110011100; // SUBI X28, X28, 1
16'h0061:  out = 32'b10110101111111111111111111011100; // CBNZ X28, -2
16'h0062:  out = 32'b10001010000111110000000000000000; // AND X0, X0, XZR
16'h0063:  out = 32'b10001010000111110000000000100001; // AND X1, X1, XZR
16'h0064:  out = 32'b10001010000111110000000001000010; // AND X2, X2, XZR
16'h0065:  out = 32'b10001010000111110000000001100011; // AND X3, X3, XZR
16'h0066:  out = 32'b10001010000111110000000010000100; // AND X4, X4, XZR
16'h0067:  out = 32'b10001010000111110000000010100101; // AND X5, X5, XZR
16'h0068:  out = 32'b10001010000111110000000011000110; // AND X6, X6, XZR
16'h0069:  out = 32'b10001010000111110000000011100111; // AND X7, X7, XZR
16'h006a:  out = 32'b10001010000111110000000100001000; // AND X8, X8, XZR
16'h006b:  out = 32'b10001010000111110000000100101001; // AND X9, X9, XZR
16'h006c:  out = 32'b10001010000111110000000101001010; // AND X10, X10, XZR
16'h006d:  out = 32'b10001010000111110000000101101011; // AND X11, X11, XZR
16'h006e:  out = 32'b10001010000111110000000110001100; // AND X12, X12, XZR
16'h006f:  out = 32'b10001010000111110000000110101101; // AND X13, X13, XZR
16'h0070:  out = 32'b10001010000111110000000111001110; // AND X14, X14, XZR
16'h0071:  out = 32'b10001010000111110000000111101111; // AND X15, X15, XZR
16'h0072:  out = 32'b10001010000111110000001000010000; // AND X16, X16, XZR
16'h0073:  out = 32'b10001010000111110000001000110001; // AND X17, X17, XZR
16'h0074:  out = 32'b10001010000111110000001001010010; // AND X18, X18, XZR
16'h0075:  out = 32'b10001010000111110000001110011100; // AND X28, X28, XZR
16'h0076:  out = 32'b10001010000111110000001110111101; // AND X29, X29, XZR
16'h0077:  out = 32'b10001010000111110000001111011110; // AND X30, X30, XZR
16'h0078:  out = 32'b00010111111111111111111110000111; // B -121
default: out=32'hD60003E0; //BR XZR
endcase
end
endmodule

/*module rom_case(out, address);
output reg [31:0] out;
input  [15:0] address; // address- 16 deep memory  
always @(address) begin
case (address)
16'h0000:  out = 32'b11010010100000000000000000100001; // MOVZ X1, 1
16'h0001:  out = 32'b11010010100000000000000001000010; // MOVZ X2, 2
16'h0002:  out = 32'b11010010100111111111111111100100; // MOVZ X4, 65535
16'h0003:  out = 32'b11111000000000000000000000100100; // STUR X4, [X1, 0]
16'h0004:  out = 32'b10010001000000000011111111100011; // ADDI X3, XZR, 15
16'h0005:  out = 32'b11111000000000000000001111100011; // STUR X3, [XZR, 0]
default: out=32'hD60003E0; //BR XZR
endcase
end
endmodule*/
/*
module rom_case(out, address);
output reg [31:0] out;
input  [15:0] address; // address- 16 deep memory  
always @(address) begin
case (address)
16'h0000:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0001:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0002:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0003:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0004:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0005:  out = 32'b11010011011000000100000000100001; // LSL X1, X1, 16
16'h0006:  out = 32'b11110010100111111111111111100001; // MOVK X1, 65535
16'h0007:  out = 32'b11110010100100000000000000000010; // MOVK X2, 32768
16'h0008:  out = 32'b11010011011000001011010001000010; // LSL X2, X2, 45
16'h0009:  out = 32'b10010001000001000000000001000011; // ADDI X3, X2, 256
16'h000a:  out = 32'b11111000000000000000000001100001; // STUR X1, [X3, 0]
16'h000b:  out = 32'b11111000000000001000000001100001; // STUR X1, [X3, 8]
16'h000c:  out = 32'b11111000000000010000000001100001; // STUR X1, [X3, 16]
16'h000d:  out = 32'b11111000000000011000000001100001; // STUR X1, [X3, 24]
16'h000e:  out = 32'b11111000000000100000000001100001; // STUR X1, [X3, 32]
16'h000f:  out = 32'b11111000000000101000000001100001; // STUR X1, [X3, 40]
16'h0010:  out = 32'b11111000000000110000000001100001; // STUR X1, [X3, 48]
16'h0011:  out = 32'b11111000000000111000000001100001; // STUR X1, [X3, 56]
16'h0012:  out = 32'b11110010100111100110011110100100; // MOVK X4, 62269
16'h0013:  out = 32'b11010011011000000100000010000100; // LSL X4, X4, 16
16'h0014:  out = 32'b11110010100001011011011100100100; // MOVK X4, 11705
16'h0015:  out = 32'b11010011011000000100000010000100; // LSL X4, X4, 16
16'h0016:  out = 32'b11110010100111000101010100000100; // MOVK X4, 58024
16'h0017:  out = 32'b11010011011000000011010010000100; // LSL X4, X4, 13
16'h0018:  out = 32'b11110010100100001001010010100101; // MOVK X5, 33957
16'h0019:  out = 32'b11010011011000000100000010100101; // LSL X5, X5, 16
16'h001a:  out = 32'b11110010100001010101010010100101; // MOVK X5, 10917
16'h001b:  out = 32'b11010011011000000100000010100101; // LSL X5, X5, 16
16'h001c:  out = 32'b11110010100111000101010100000101; // MOVK X5, 58024
16'h001d:  out = 32'b11010011011000000011010010100101; // LSL X5, X5, 13
16'h001e:  out = 32'b11110010100100001000011110100110; // MOVK X6, 33853
16'h001f:  out = 32'b11010011011000000100000011000110; // LSL X6, X6, 16
16'h0020:  out = 32'b11110010100001010001010010100110; // MOVK X6, 10405
16'h0021:  out = 32'b11010011011000000100000011000110; // LSL X6, X6, 16
16'h0022:  out = 32'b11110010100111000100100100000110; // MOVK X6, 57928
16'h0023:  out = 32'b11010011011000000011010011000110; // LSL X6, X6, 13
16'h0024:  out = 32'b11110010100111101000010100100111; // MOVK X7, 62505
16'h0025:  out = 32'b11010011011000000100000011100111; // LSL X7, X7, 16
16'h0026:  out = 32'b11110010100001010001011110100111; // MOVK X7, 10429
16'h0027:  out = 32'b11010011011000000100000011100111; // LSL X7, X7, 16
16'h0028:  out = 32'b11110010100111000100100100000111; // MOVK X7, 57928
16'h0029:  out = 32'b11010011011000000011010011100111; // LSL X7, X7, 13
16'h002a:  out = 32'b11110010100000101000010010101000; // MOVK X8, 5157
16'h002b:  out = 32'b11010011011000000100000100001000; // LSL X8, X8, 16
16'h002c:  out = 32'b11110010100001010001010010101000; // MOVK X8, 10405
16'h002d:  out = 32'b11010011011000000100000100001000; // LSL X8, X8, 16
16'h002e:  out = 32'b11110010100111011100100100001000; // MOVK X8, 61000
16'h002f:  out = 32'b11010011011000000011010100001000; // LSL X8, X8, 13
16'h0030:  out = 32'b11110010100000101000010010101001; // MOVK X9, 5157
16'h0031:  out = 32'b11010011011000000100000100101001; // LSL X9, X9, 16
16'h0032:  out = 32'b11110010100001010001010010101001; // MOVK X9, 10405
16'h0033:  out = 32'b11010011011000000100000100101001; // LSL X9, X9, 16
16'h0034:  out = 32'b11110010100111010100100100001001; // MOVK X9, 59976
16'h0035:  out = 32'b11010011011000000011010100101001; // LSL X9, X9, 13
16'h0036:  out = 32'b11110010100000101001010010101010; // MOVK X10, 5285
16'h0037:  out = 32'b11010011011000000100000101001010; // LSL X10, X10, 16
16'h0038:  out = 32'b11110010100001010001010010101010; // MOVK X10, 10405
16'h0039:  out = 32'b11010011011000000100000101001010; // LSL X10, X10, 16
16'h003a:  out = 32'b11110010100111010100100000001010; // MOVK X10, 59968
16'h003b:  out = 32'b11010011011000000011010101001010; // LSL X10, X10, 13
16'h003c:  out = 32'b11110010100111100110010010101011; // MOVK X11, 62245
16'h003d:  out = 32'b11010011011000000100000101101011; // LSL X11, X11, 16
16'h003e:  out = 32'b11110010100111010001011100101011; // MOVK X11, 59577
16'h003f:  out = 32'b11010011011000000100000101101011; // LSL X11, X11, 16
16'h0040:  out = 32'b11110010100111011100100100001011; // MOVK X11, 61000
16'h0041:  out = 32'b11010011011000000011010101101011; // LSL X11, X11, 13
16'h0042:  out = 32'b10010001000000000000000001001100; // ADDI X12, X2, 0
16'h0043:  out = 32'b11111000010000110000001111101111; // LDUR X15, [XZR, 48]
16'h0044:  out = 32'b11111000000000000000000110001011; // STUR X11, [X12, 0]
16'h0045:  out = 32'b11111000000000001000000110001010; // STUR X10, [X12, 8]
16'h0046:  out = 32'b11111000000000010000000110001001; // STUR X9, [X12, 16]
16'h0047:  out = 32'b11111000000000011000000110001000; // STUR X8, [X12, 24]
16'h0048:  out = 32'b11111000000000100000000110000111; // STUR X7, [X12, 32]
16'h0049:  out = 32'b11111000000000101000000110000110; // STUR X6, [X12, 40]
16'h004a:  out = 32'b11111000000000110000000110000101; // STUR X5, [X12, 48]
16'h004b:  out = 32'b11111000000000111000000110000100; // STUR X4, [X12, 56]
16'h004c:  out = 32'b11010011010000000000010101101011; // LSR X11, X11, 1
16'h004d:  out = 32'b11010011010000000000010101001010; // LSR X10, X10, 1
16'h004e:  out = 32'b11010011010000000000010100101001; // LSR X9, X9, 1
16'h004f:  out = 32'b11010011010000000000010100001000; // LSR X8, X8, 1
16'h0050:  out = 32'b11010011010000000000010011100111; // LSR X7, X7, 1
16'h0051:  out = 32'b11010011010000000000010011000110; // LSR X6, X6, 1
16'h0052:  out = 32'b11010011010000000000010010100101; // LSR X5, X5, 1
16'h0053:  out = 32'b11010011010000000000010010000100; // LSR X4, X4, 1
16'h0054:  out = 32'b11010001000000000000010111101111; // SUBI X15, X15, 1
16'h0055:  out = 32'b10110101111111111111110111001111; // CBNZ X15, -18
16'h0056:  out = 32'b11010110000000000000001111100000; // BR XZR
default: out=32'hD60003E0; //BR XZR
endcase
end
endmodule



// auto generated from http://users.rowan.edu/~haskellt8/assembler/
module rom_case(out, address);
	output reg [31:0] out;
	input  [15:0] address; // address- 16 deep memory  
	always @(address) begin
		case (address)
			// Overclock (Nice!) Test
			16'h0000:  out = 32'b11010010100000000000000000100111; // MOVZ X7, 1
			// change the shift amount to change the delay
			// if using a testbench to debug then change the shift amoun to 1
			16'h0001:  out = 32'b1101001101100000_011000_0011100111; // LSL X7, X7, 24  011000
			//16'h0001:  out = 32'b1101001101100000_000001_0011100111; // LSL X7, X7, 01  000001
			16'h0002:  out = 32'b11111000000000110000001111100111; // STUR X7, [XZR, 48]
			16'h0003:  out = 32'b11010001000001100101011111100000; // SUBI X0, XZR, 405
			16'h0004:  out = 32'b11010001000100000000001111100101; // SUBI X5, XZR, 1024
			16'h0005:  out = 32'b10110010000001000110011111100010; // ORRI X2, XZR, 281
			16'h0006:  out = 32'b10001011000001010000000001000010; // ADD X2, X2, X5
			16'h0007:  out = 32'b10001011000001010000000000000000; // ADD X0, X0, X5
			16'h0008:  out = 32'b10001011000001010000000010100101; // ADD X5, X5, X5
			16'h0009:  out = 32'b10001011000000100000000010100010; // ADD X2, X5, X2
			16'h000a:  out = 32'b11010011011000000000010010100101; // LSL X5, X5, 1
			16'h000b:  out = 32'b10001011000001010000000000000000; // ADD X0, X0, X5
			16'h000c:  out = 32'b11010011011000000000010010100101; // LSL X5, X5, 1
			16'h000d:  out = 32'b10001011000001010000000001000010; // ADD X2, X2, X5
			16'h000e:  out = 32'b11001011000001010000001111100101; // SUB X5, XZR, X5
			16'h000f:  out = 32'b10001011000000100000000000000000; // ADD X0, X0, X2
			16'h0010:  out = 32'b10001011000000100000000000000000; // ADD X0, X0, X2
			16'h0011:  out = 32'b11111000000000011000001111100000; // STUR X0, [XZR, 24]
			16'h0012:  out = 32'b11111000000000100000001111100010; // STUR X2, [XZR, 32]
			16'h0013:  out = 32'b11111000000000101000001111100101; // STUR X5, [XZR, 40]
			16'h0014:  out = 32'b10010001000000000000001111100000; // ADDI X0, XZR, 0
			16'h0015:  out = 32'b10010010000000000000001111100001; // ANDI X1, XZR, 0
			16'h0016:  out = 32'b11010010000000000000001111100010; // EORI X2, XZR, 0
			16'h0017:  out = 32'b10110010000000000000001111100011; // ORRI X3, XZR, 0
			16'h0018:  out = 32'b10101010000111110000001111100100; // ORR X4, X31, X31
			16'h0019:  out = 32'b10001010000111110000001111100101; // AND X5, X31, X31
			16'h001a:  out = 32'b10001010000111110000001111100110; // AND X6, X31, X31
			16'h001b:  out = 32'b11111000010000110000001111100111; // LDUR X7, [XZR, 48]
			16'h001c:  out = 32'b11010001000000000000010011100111; // SUBI X7, X7, 1
			16'h001d:  out = 32'b10110101111111111111111111000111; // CBNZ X7, -2
			16'h001e:  out = 32'b11010010100111111111111111100000; // MOVZ X0, 65535
			16'h001f:  out = 32'b11010001000000000000011111100001; // SUBI X1, XZR, 1
			16'h0020:  out = 32'b11010010100111111111111111100010; // MOVZ X2, 65535
			16'h0021:  out = 32'b11010001000000000000011111100011; // SUBI X3, XZR, 1
			16'h0022:  out = 32'b11010010100111111111111111100100; // MOVZ X4, 65535
			16'h0023:  out = 32'b11010001000000000000011111100101; // SUBI X5, XZR, 1
			16'h0024:  out = 32'b11010001000000000000011111100110; // SUBI X6, XZR, 1
			16'h0025:  out = 32'b11111000010000110000001111100111; // LDUR X7, [XZR, 48]
			16'h0026:  out = 32'b11010001000000000000010011100111; // SUBI X7, X7, 1
			16'h0027:  out = 32'b10110101111111111111111111000111; // CBNZ X7, -2
			16'h0028:  out = 32'b11111000010000011000001111100100; // LDUR X4, [XZR, 24]
			16'h0029:  out = 32'b11111000010000100000001111100010; // LDUR X2, [XZR, 32]
			16'h002a:  out = 32'b11111000010000101000001111100101; // LDUR X5, [XZR, 40]
			16'h002b:  out = 32'b10010001000000000000000001000011; // ADDI X3, X2, 0
			16'h002c:  out = 32'b10110010000000010000000001100011; // ORRI X3, X3, 64
			16'h002d:  out = 32'b11010010100000000000000100000111; // MOVZ X7, 8
			16'h002e:  out = 32'b11001011000001110000000001100011; // SUB X3, X3, X7
			16'h002f:  out = 32'b11010010100000000000000000100111; // MOVZ X7, 1
			16'h0030:  out = 32'b11001010000001110000000001100001; // EOR X1, X3, X7
			16'h0031:  out = 32'b11001011000001010000000000100001; // SUB X1, X1, X5
			16'h0032:  out = 32'b10110010000000000000000010000000; // ORRI X0, X4, 0
			16'h0033:  out = 32'b11010010100000000000000000000101; // MOVZ X5, 0
			16'h0034:  out = 32'b11010010100000000000000000000110; // MOVZ X6, 0
			16'h0035:  out = 32'b11111000010000110000001111100111; // LDUR X7, [XZR, 48]
			16'h0036:  out = 32'b11010001000000000000010011100111; // SUBI X7, X7, 1
			16'h0037:  out = 32'b10110101111111111111111111000111; // CBNZ X7, -2
			16'h0038:  out = 32'b11010110000000000000001111100000; // BR XZR
			default: out=32'hD60003E0; //BR XZR
		endcase
	end
endmodule


// auto generated from http://users.rowan.edu/~haskellt8/assembler/
module rom_case(out, address);
	output reg [31:0] out;
	input  [15:0] address; // address- 16 deep memory  
	always @(address) begin
		case (address)
			// Overclock (Nice!) Test
			16'h0000:  out = 32'b11010010100000000000000000100111; // MOVZ X7, 1
			// change the shift amount to change the delay
			// if using a testbench to debug then change the shift amoun to 1
			//16'h0001:  out = 32'b1101001101100000_011000_0011100111; // LSL X7, X7, 24  011000
			16'h0001:  out = 32'b1101001101100000_000001_0011100111; // LSL X7, X7, 01  000001
			16'h0002:  out = 32'b11111000000000110000001111100111; // STUR X7, [XZR, 48]
			16'h0003:  out = 32'b11010001000001100101011111100000; // SUBI X0, XZR, 405
			16'h0004:  out = 32'b11010001000100000000001111100101; // SUBI X5, XZR, 1024
			16'h0005:  out = 32'b10110010000001000110011111100010; // ORRI X2, XZR, 281
			16'h0006:  out = 32'b10001011000001010000000001000010; // ADD X2, X2, X5
			16'h0007:  out = 32'b10001011000001010000000000000000; // ADD X0, X0, X5
			16'h0008:  out = 32'b10001011000001010000000010100101; // ADD X5, X5, X5
			16'h0009:  out = 32'b10001011000000100000000010100010; // ADD X2, X5, X2
			16'h000a:  out = 32'b11010011011000000000010010100101; // LSL X5, X5, 1
			16'h000b:  out = 32'b10001011000001010000000000000000; // ADD X0, X0, X5
			16'h000c:  out = 32'b11010011011000000000010010100101; // LSL X5, X5, 1
			16'h000d:  out = 32'b10001011000001010000000001000010; // ADD X2, X2, X5
			16'h000e:  out = 32'b11001011000001010000001111100101; // SUB X5, XZR, X5
			16'h000f:  out = 32'b10001011000000100000000000000000; // ADD X0, X0, X2
			16'h0010:  out = 32'b10001011000000100000000000000000; // ADD X0, X0, X2
			16'h0011:  out = 32'b11111000000000011000001111100000; // STUR X0, [XZR, 24]
			16'h0012:  out = 32'b11111000000000100000001111100010; // STUR X2, [XZR, 32]
			16'h0013:  out = 32'b11111000000000101000001111100101; // STUR X5, [XZR, 40]
			16'h0014:  out = 32'b10010001000000000000001111100000; // ADDI X0, XZR, 0
			16'h0015:  out = 32'b10010010000000000000001111100001; // ANDI X1, XZR, 0
			16'h0016:  out = 32'b11010010000000000000001111100010; // EORI X2, XZR, 0
			16'h0017:  out = 32'b10110010000000000000001111100011; // ORRI X3, XZR, 0
			16'h0018:  out = 32'b10101010000111110000001111100100; // ORR X4, X31, X31
			16'h0019:  out = 32'b10001010000111110000001111100101; // AND X5, X31, X31
			16'h001a:  out = 32'b10001010000111110000001111100110; // AND X6, X31, X31
			16'h001b:  out = 32'b11111000010000110000001111100111; // LDUR X7, [XZR, 48]
			16'h001c:  out = 32'b11010001000000000000010011100111; // SUBI X7, X7, 1
			16'h001d:  out = 32'b10110101111111111111111111000111; // CBNZ X7, -2
			16'h001e:  out = 32'b11010010100111111111111111100000; // MOVZ X0, 65535
			16'h001f:  out = 32'b11010001000000000000011111100001; // SUBI X1, XZR, 1
			16'h0020:  out = 32'b11010010100111111111111111100010; // MOVZ X2, 65535
			16'h0021:  out = 32'b11010001000000000000011111100011; // SUBI X3, XZR, 1
			16'h0022:  out = 32'b11010010100111111111111111100100; // MOVZ X4, 65535
			16'h0023:  out = 32'b11010001000000000000011111100101; // SUBI X5, XZR, 1
			16'h0024:  out = 32'b11010001000000000000011111100110; // SUBI X6, XZR, 1
			16'h0025:  out = 32'b11111000010000110000001111100111; // LDUR X7, [XZR, 48]
			16'h0026:  out = 32'b11010001000000000000010011100111; // SUBI X7, X7, 1
			16'h0027:  out = 32'b10110101111111111111111111000111; // CBNZ X7, -2
			16'h0028:  out = 32'b11111000010000011000001111100100; // LDUR X4, [XZR, 24]
			16'h0029:  out = 32'b11111000010000100000001111100010; // LDUR X2, [XZR, 32]
			16'h002a:  out = 32'b11111000010000101000001111100101; // LDUR X5, [XZR, 40]
			16'h002b:  out = 32'b10010001000000000000000001000011; // ADDI X3, X2, 0
			16'h002c:  out = 32'b10110010000000010000000001100011; // ORRI X3, X3, 64
			16'h002d:  out = 32'b11010010100000000000000100000111; // MOVZ X7, 8
			16'h002e:  out = 32'b11001011000001110000000001100011; // SUB X3, X3, X7
			16'h002f:  out = 32'b11010010100000000000000000100111; // MOVZ X7, 1
			16'h0030:  out = 32'b11001010000001110000000001100001; // EOR X1, X3, X7
			16'h0031:  out = 32'b11001011000001010000000000100001; // SUB X1, X1, X5
			16'h0032:  out = 32'b10110010000000000000000010000000; // ORRI X0, X4, 0
			16'h0033:  out = 32'b11010010100000000000000000000101; // MOVZ X5, 0
			16'h0034:  out = 32'b11010010100000000000000000000110; // MOVZ X6, 0
			16'h0035:  out = 32'b11111000010000110000001111100111; // LDUR X7, [XZR, 48]
			16'h0036:  out = 32'b11010001000000000000010011100111; // SUBI X7, X7, 1
			16'h0037:  out = 32'b10110101111111111111111111000111; // CBNZ X7, -2
			16'h0038:  out = 32'b11010110000000000000001111100000; // BR XZR
			default: out=32'hD60003E0; //BR XZR
		endcase
	end
endmodule


// auto generated from http://users.rowan.edu/~haskellt8/assembler/
module rom_case(out, address);
	output reg [31:0] out;
	input  [15:0] address; // address- 16 deep memory  
	always @(address) begin
		case (address)
			16'h0000:  out = 32'b11010010100000000000000000100001; // MOVZ X1, 1
			16'h0001:  out = 32'b11010010100000000000000001000010; // MOVZ X2, 2
			16'h0002:  out = 32'b10001011000000100000000000100100; // ADD X4, X1, X2
			16'h0003:  out = 32'b11111000000000010000001111100100; // STUR X4, [XZR, 16]
			16'h0004:  out = 32'b11111000010000010000001111100101; // LDUR X5, [XZR, 16]
			16'h0005:  out = 32'b10010100000000000000000000001010; // BL 10
			16'h0006:  out = 32'b10110101000000000000000000100010; // CBNZ X2, 1
			16'h0007:  out = 32'b00010100000000000000000000000001; // B 1
			16'h0008:  out = 32'b00010111111111111111111111111001; // B -7
			16'h0009:  out = 32'b10110100000000000000000001100001; // CBZ X1, 3
			16'h000a:  out = 32'b11101011000000100000000000111111; // SUBS XZR, X1, X2
			16'h000b:  out = 32'b01010100000000000000000000100011; // B.LO 1
			16'h000c:  out = 32'b11111000000000001000001111100001; // STUR X1, [XZR, 8]
			16'h000d:  out = 32'b11111000010000001000001111100110; // LDUR X6, [XZR, 8]
			16'h000e:  out = 32'b11010010000000000000010011100111; // EORI X7, X7, 1
			16'h000f:  out = 32'b00010111111111111111111111111110; // B -2
			16'h0010:  out = 32'b10010001000000000000100000100001; // ADDI X1, X1, 2
			16'h0011:  out = 32'b11010001000000000000010001000010; // SUBI X2, X2, 1
			16'h0012:  out = 32'b11010110000000000000001111000000; // BR X30
			default: out=32'hD60003E0; //BR XZR
		endcase
	end
endmodule


C code for above asm:
X1 = 1;
X2 = 2;
while(1) {
	X4 = X1 + X2;
	M[16] = X4;
	X5 = M[16];
	IncDec();
	if(X2 == 0) {
		break;
	}
}
if(X1 != 0) {
	if(X1 > X2) {
		M[8] = X1;
	}
}
X6 = M[8]
while(1){
	X7 = X7 ^ 1;
}

void IncDec(void) {
	X1 = X1 + 1;
	X2 = X2 - 1
}
*/






/*module rom_case(out, address);
	output reg[31:0] out;
	input [15:0] address;
	always @(address) begin
			case (address)
				16'h0000: out = 32'h91002841; // ADD X1, X2, 10
				16'h0001: out = 32'hF8001061;//STUR X1, [X3, 1]
				16'h0002: out = 32'hF84013E9;//LDUR X9, [XZR, 1]
				16'h0003: out = 32'hD360442C;//LSL X12, X1, 17
				
				16'h0004: out = 32'h910003E7;
				16'h0005: out = 32'hF100C8FF;
				16'h0006: out = 32'h54000082;
				16'h0007: out = 32'hF84000F7;
				16'h0008: out = 32'h11111000000000110010000011110111;
				16'h0009: out = 32'h10010001000000000000010011100111;
				16'h000A: out = 32'h00010111111111111111111111111010;			
				
				default: out = 32'hd60003E0; // BR XZR
			endcase
	end
endmodule

For(X7 = 0; X7 < 5; X7++)
{
	*(X4 + X7) = *(X13 + X7);
}
//ADD X7, XZR, 0
//FOR: SUBIS XZR, X7, 50
//B.GS END
//LDUR X23, [X7,0]
//STUR X23 [X7, 50]
//ADDI X7, X7, 1;
//B -6
//END:


*/
		